# Blame Last Change: Alejandro Malagon 
# Date Last Change: 2024/04/11

<#
.SYNOPSIS
    This script is used to restart the specified application pools on a remote server.

.DESCRIPTION
    The script takes several parameters including the function to execute, the site name, the AppPoolChoice value, and the verbose mode.
    It sets the security protocol to TLS 1.2, checks if the current user is an administrator and imports the WebAdministration module if true.
    It also defines some default configuration options and verifies the existence of the site, AppGroup, and AppPoolChoice.
    Based on the AppPoolChoice value, it determines the appropriate application pools to restart and performs the restart operation on the remote server.

.PARAMETER Site
    The site name.

.PARAMETER AppPoolChoice
    The AppPoolChoice value.

.PARAMETER Verbose
    The verbose mode.

.NOTES
    Author: Alejandro Malagon Diaz
    Date:   2024/04/11

.EXAMPLE
    .\restartAppPool.ps1 -Site "SomeSite" -AppPoolChoice "1" -Verbose "True"
#>

param (
    [string] $Site,             # The site name
    [string] $AppPoolChoice,    # The AppPoolChoice value
    [string] $Verbose           # The AppPoolChoice value
)

# Set the security protocol to TLS 1.2
[System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor [System.Net.SecurityProtocolType]::Tls12

# Check if the current user is an administrator and import the WebAdministration module if true
$currentPrincipal = New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent())

# Check if the current user is an administrator and import the WebAdministration module if true
if ($currentPrincipal.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)) {
    Import-Module WebAdministration
}

# Get the DNS root of the current AD domain and assign it to $DomainName
$DomainName = (Get-ADDomain | Select-Object -ExpandProperty DNSRoot)

# Split the $DomainName into parts using the dot (.) as the delimiter and assign it to $DomainNameParts
$DomainNameParts = $DomainName.Split(".")

# Extract the NetBIOS, Domain, and TLD from $DomainNameParts and assign them to $NetBIOS, $Domain, and $TLD respectively
$Domain = $DomainNameParts[1]
$TLD = $DomainNameParts[2]

## Default endpoints
$script:DefaultSqlServer = "sales-sql01.$DomainName"
$script:DefaultAppGroup = "cloud-app01"

## Folder paths
$script:SiteFolder = "\\cloud-storage.$DomainName\share\sites"
$script:AppPool = "IIS:\AppPools"

# Function to write verbose messages if the verbose mode is enabled
function Write-Verbose ($message) {
    if ($script:Verbose) {
        Write-Host $message
    }
}

#Site existence verification
Write-Verbose ("Site: $Site")
if (!$script:Site) { $script:Site = (Read-Host "Enter the name for the site").trim() }
    

#AppPoolChoice existence verification
Write-Verbose ("AppPoolChoice: $AppPoolChoice")
if (!$script:AppPoolChoice) { $script:AppPoolChoice = (Read-Host "Broken").trim() }

#Creating the AppPools array
$AppPools = @()

# Possible options:
#     1. Cityworks Office AppPool
#     2. Cityworks Platform AppPool (23.x+)
#     3. Public Access AppPool
#     4. All
switch ($AppPoolChoice) {
    '1' {
        if (Test-Path "$SiteFolder\$Site\WebSite\WebAppSettings.config") {
            $xml = [xml](get-content "$SiteFolder\$Site\WebSite\WebAppSettings.config")
            if ($xml.SelectSingleNode("//appSettings/add[@key = 'AppGroup']")) {
                $script:AppGroup = $xml.SelectSingleNode("//appSettings/add[@key = 'AppGroup']").value
                Write-Verbose ("AppGroup: $AppGroup")
            }
                        
            $script:appHost = "$AppGroup.$Domain.$TLD"
            Write-Verbose ("appHost: $appHost")

            $version = $xml.SelectSingleNode("//appSettings/add[@key = 'VersionNumber']").Value
            Write-Verbose ("Version: $version")
            
            if ($version -match "Office Companion") {
                $AppPools += "$Site-Office"
                Write-Verbose ("AppPools: $AppPools")
            }
            else {
                $AppPools += $Site
                Write-Verbose ("AppPools: $AppPools")
            }

        }
        else {
            Write-Host "`t Cityworks Office AppPool not found." -ForegroundColor Red
            Exit 1        
        }
    }
    '2' {
        if (Test-Path "$SiteFolder\$Site\Site") {
            $AppPools += "Cityworks_${Site}_AppPool"
            Write-Verbose ("AppPools: $AppPools")

            Import-Module powershell-yaml
            $yamlContent = Get-Content "$SiteFolder\$Site\Site\cw-site\run.yaml" | ConvertFrom-Yaml
            $uri = New-Object System.Uri($yamlContent.HostUrl)
            Write-Verbose ("HostUrl: $uri")
            $script:appHost = $uri.Host      
            Write-Verbose ("appHost: $appHost")      
        }
        else {
            Write-Host "`t  Cityworks Platform AppPool (23.x+) not found." -ForegroundColor Red
            Exit 1
        }
    }
    '3' {
        if (Test-Path "$SiteFolder\$Site\PublicAccess") {
            $AppPools += "$Site-PublicAppPool"
            Write-Verbose ("AppPools: $AppPools")

            $xml = [xml](get-content "$SiteFolder\$Site\PublicSite\WebAppSettings.config")    
            $uri = New-Object System.Uri($xml.SelectSingleNode("//appSettings/add[@key = 'ServiceUrl']").value)
            Write-Verbose ("HostUrl: $uri")
            $script:appHost = $uri.Host     
            Write-Verbose ("appHost: $appHost") 
        }
        else {
            Write-Host "`t Public Access AppPool not found." -ForegroundColor Red
            Exit 1
        }
    }
    '4' {
        $xml = [xml](get-content "$SiteFolder\$Site\WebSite\WebAppSettings.config")
        if ($xml.SelectSingleNode("//appSettings/add[@key = 'AppGroup']")) {
            $script:AppGroup = $xml.SelectSingleNode("//appSettings/add[@key = 'AppGroup']").value
            Write-Verbose ("AppGroup: $AppGroup")
        }

        $script:appHost = "$AppGroup.$Domain.$TLD"
        Write-Verbose ("appHost: $appHost")
        
        $version = $xml.SelectSingleNode("//appSettings/add[@key = 'VersionNumber']").Value
        Write-Verbose ("Version: $version")
            
        if ($version -match "Office Companion") {
            $AppPools += "$Site-Office"
            Write-Verbose ("AppPools: $AppPools")
        }
        else {
            $AppPools += "$Site"
            Write-Verbose ("AppPools: $AppPools")
        }

        if (Test-Path "$SiteFolder\$Site\Site") {
            $AppPools += "Cityworks_${Site}_AppPool"
            Write-Verbose ("AppPools: $AppPools")
        }

        if (Test-Path "$SiteFolder\$Site\PublicAccess") {
            $AppPools += "$Site-PublicAppPool"
            Write-Verbose ("AppPools: $AppPools")
        }
    }
    default { Write-Host "`t Not a valid option. Try again." -f red }
}

$appServer = $(Resolve-DnsName $appHost).IP4Address | Resolve-DnsName | Select-Object -ExpandProperty NameHost
Write-Verbose ("AppServer: $appServer")

$s = New-PSSession -ComputerName $appServer

Invoke-Command -Session $s -Script {
    foreach ($AppPool in $using:AppPools) {
        Write-Host "`t $AppPool current state: $((Get-WebAppPoolState $AppPool).value)" -f yellow
        Write-Host "Restarting AppPool $AppPool ..."
        if ($(Get-WebAppPoolState $AppPool).value -ne "Stopped") {
            if (Test-Path -path "IIS:\AppPools\$AppPool") {
                Write-Host ("Running Stop-WebAppPool $AppPool")
                Stop-WebAppPool $AppPool
                $firstRun = "true"
                while ($(Get-WebAppPoolState $AppPool).value -ne "Stopped") {
                    if ($firstRun -eq "true") {
                        Write-Host "`t Waiting to stop IIS:\AppPools\$AppPool ..." -f yellow
                        $firstRun = "false"
                    }
                }
                Write-Host "`t $AppPool current state: $((Get-WebAppPoolState $AppPool).value)" -f yellow
                Write-Host ("Running Start-WebAppPool $AppPool")
                Start-WebAppPool $AppPool
                $firstRun = "true"
                while ($(Get-WebAppPoolState $AppPool).value -ne "Started") {
                    if ($firstRun -eq "true") {
                        Write-Host "`t Waiting to start IIS:\AppPools\$AppPool ..." -f yellow
                        $firstRun = "false"
                    }
                }
            }
        }
        Write-Host "`t $AppPool current state: $((Get-WebAppPoolState $AppPool).value)" -f yellow
        Write-Host "`t AppPool $AppPool restarted successfully." -ForegroundColor Green
    }
}
Remove-PSSession $s
